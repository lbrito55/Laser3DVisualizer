import { Scene, Vector3 } from "babylonjs";
import { CylinderPanel as BabylonCylinderPanel, Control3D } from "babylonjs-gui";
import { SceneComponentProps, PropsHandler } from "./SceneComponent";
import GUI3DSceneComponent from "./GUI3DSceneComponent";
export declare type CylinderPanelProps = {
    margin: number;
    columns: number;
    rows: number;
    /**
     * The radius property is used to define the radius of the hosting cylinder
     */
    radius: number;
    /**
     * ie: Container3D.FACEORIGIN_ORIENTATION is the default.
     */
    orientation: number;
    position: Vector3;
} & SceneComponentProps<BabylonCylinderPanel>;
declare class CylinderPanelPropsHandler implements PropsHandler<BabylonCylinderPanel, CylinderPanelProps> {
    handle(target: BabylonCylinderPanel, props: CylinderPanelProps): void;
}
/**
 *
 */
export default class CylinderPanel extends GUI3DSceneComponent<BabylonCylinderPanel, BabylonCylinderPanel, CylinderPanelProps> {
    protected cylinderPanel?: BabylonCylinderPanel;
    addControl(control: Control3D): void;
    removeControl(control: Control3D): void;
    componentsCreated(): void;
    componentWillUnmount(): void;
    create(scene: Scene): BabylonCylinderPanel;
    /**
     * We don't want to linkToTransformNode(anchor) until after the panel has been added to 3DManager.
     *
     * From docs: When linking a control to a transform node, please make sure that the control was first added to a container or to the root manager.
     *
     * @param cylinderPanel panel to further initialise
     */
    initComplete(cylinderPanel: BabylonCylinderPanel): void;
    readonly propsHandlers: CylinderPanelPropsHandler[];
}
export {};
