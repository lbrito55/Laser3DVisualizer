import { Scene, EventState } from "babylonjs";
import { InputText as BabylonInputText, Control } from "babylonjs-gui";
import { SceneComponentProps, PropsHandler } from "./SceneComponent";
import GUI2DSceneComponent from "./GUI2DSceneComponent";
import ControlPropsHandler from "./2DControlProps";
export declare type InputTextProps = {
    text: string;
    color?: string;
    fontSize?: number;
    fontStyle?: string;
    fontFamily?: string;
    onTextChanged?: (eventData: BabylonInputText, eventState: EventState) => void;
} & SceneComponentProps<BabylonInputText>;
export declare class InputTextPropsHandler implements PropsHandler<BabylonInputText, InputTextProps> {
    handle(target: BabylonInputText, props: InputTextProps): void;
}
/**
 * Cannot be attached directly to a 3D panel.
 */
export default class InputText extends GUI2DSceneComponent<BabylonInputText, BabylonInputText, InputTextProps> {
    protected inputText?: BabylonInputText;
    componentsCreated(): void;
    addControl(control: Control): void;
    removeControl(control: Control): void;
    create(scene: Scene): BabylonInputText;
    readonly propsHandlers: (ControlPropsHandler | InputTextPropsHandler)[];
}
