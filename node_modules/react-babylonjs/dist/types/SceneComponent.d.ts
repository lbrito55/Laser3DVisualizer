import React, { Component } from 'react';
import { Scene, Vector3, Nullable, AbstractMesh, Material as BabylonMaterial } from 'babylonjs';
import { ComponentContainer, ComponentRegistry } from './Scene';
export interface Behavior<T> {
    apply(target: T, scene: Scene): void;
}
export interface Material<T> {
    material?: BabylonMaterial;
    apply(target: T, scene: Scene): void;
}
export declare type ComponentContainerProps = {
    scene: Scene;
    name: string;
    container: any;
    componentRegistry: ComponentRegistry;
    addBehavior: (behavior: any) => void;
    setMaterial: (material: Material<AbstractMesh>) => void;
};
export declare type SceneComponentProps<T> = {
    childComponents: any[];
    onCreated: (child: Nullable<T>) => void;
    registerChild: (child: Nullable<T>) => void;
} & ComponentContainerProps;
export declare type NodeProps = {
    position: Vector3;
};
export interface PropsHandler<T, U> {
    handle(target: T, props: U): void;
}
/**
 * Base implemention of SceneComponent.  Currently all classes are inheriting from this.
 *
 */
export default abstract class SceneComponent<T extends U, U, V extends SceneComponentProps<T>> extends Component<V, {}> implements ComponentContainer {
    protected babylonObject?: T;
    protected name?: string;
    protected hasRendered: boolean;
    protected children: any[];
    private behaviors;
    private materialComponent?;
    constructor(props: V, context?: any);
    /**
     * Called once for each Scene Component
     *
     * @param scene babylonJS scene
     */
    abstract create(scene: Scene): T;
    /**
     * Just a lifecycle hook called once after all components have had a chance to be created.
     */
    abstract componentsCreated(): void;
    /**
     * Opportunity for component to do any setup, since this will be called before componentsCreated()
     *
     * @param child
     */
    onRegisterChild(child: any): void;
    abstract readonly propsHandlers: PropsHandler<U, V>[];
    addBehavior(behavior: Behavior<U>): void;
    setMaterial(material: Material<AbstractMesh>): void;
    protected init(child: T): void;
    protected initComplete(child: T): void;
    /**
     * Called after every prop and state change after render().
     * Not called after first render(), that is only componentDidMount
     */
    componentDidUpdate(): void;
    render(): React.DetailedReactHTMLElement<{
        type: string;
        title: V["name"];
    }, HTMLElement>;
}
