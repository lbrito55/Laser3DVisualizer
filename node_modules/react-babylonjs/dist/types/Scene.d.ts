/**
 * React BabylonJS
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.txt file in the root directory of this source tree.
 */
import React, { Component, HTMLAttributes } from 'react';
import { EngineOptions, Scene as BabylonScene, AbstractMesh, Camera, Light } from 'babylonjs';
export declare type SceneEventArgs = {
    scene: BabylonScene;
    canvas: HTMLCanvasElement;
};
export interface ComponentContainer {
    onRegisterChild: (child: any) => void;
}
/**
 * Note that the height and width are the logical canvas dimensions used for drawing and are different from
 * the style.height and style.width CSS attributes. If you don't set the CSS attributes, the intrinsic size of the canvas
 * will be used as its display size; if you do set the CSS attributes, and they differ from the canvas dimensions, your content
 * will be scaled in the browser.
 */
export declare type SceneProps = {
    /**
     * Called after createCamera(...), if exists.  This must attach a camera to a canvas, if you did not implement a createCamera().
     */
    onSceneMount?: (args: SceneEventArgs) => void;
    /**
     * By implementing this, the camera is attached to the canvas automatically.
     */
    createCamera?: (args: SceneEventArgs) => Camera;
    /**
     * Triggered when the mouse leaves the canvas (no mobile equivalent)
     */
    onSceneBlur?: (args: SceneEventArgs) => void;
    /**
     * Triggered when the mouse enters the canvas (no mobile equivalent)
     */
    onSceneFocus?: (args: SceneEventArgs) => void;
    /**
     * Triggered whenever a mesh is picked in the scene.
     */
    onMeshPicked?: (mesh: AbstractMesh, scene: BabylonScene) => void;
    /**
     * true to disable Server Side Rendering
     */
    noSSR?: boolean | React.ReactChild;
    shadersRepository?: string;
    engineOptions?: EngineOptions;
    enableOfflineSupport?: boolean;
    adaptToDeviceRatio?: boolean;
    width?: number;
    height?: number;
    /**
     * By default touch-action: 'none' will be on the canvas.  Use this to disable.
     */
    touchActionNone?: boolean;
    /**
     * Useful if you want to attach CSS to the canvas by css #id selector.
     */
    id?: string;
    debug?: boolean;
};
export declare type ComponentRegistry = {
    meshes: AbstractMesh[];
    lights: Light[];
    registeredComponents: any[];
};
export declare type SceneState = {
    canRender: boolean;
};
export default class Scene extends Component<SceneProps & HTMLAttributes<HTMLCanvasElement>, SceneState> implements ComponentContainer {
    private scene?;
    private engine?;
    private componentRegistry;
    private height?;
    private width?;
    private canvas3d?;
    private firstDidUpdate;
    constructor(props: SceneProps);
    onResizeWindow: () => void;
    componentDidUpdate(): void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    onCanvas3d: (c: HTMLCanvasElement) => void;
    /**
     * When canvas receives the active focus (ie: mouse over) you can add ie: (event listener to intercept keypresses)
     */
    focus: () => void;
    /**
     * When canvas loses focus (ie: mouse out).
     *
     * Ensure you remove any event handler, if you use onSceneFocus(...) and any are added there.
     */
    blur: () => void;
    onRegisterChild(child: any): void;
    render(): string | number | React.ReactElement<any> | null;
}
